{"version":3,"sources":["components/flat/flat.jsx","components/marker/marker.js","components/google-map/google-map.jsx","App.js","serviceWorker.js","index.js"],"names":["Flat","flat","handleClick","selected","title","price","priceCurrency","name","classes","style","backgroundImage","imageUrl","onClick","className","Marker","props","currency","GoogleMap","height","width","center","this","zoom","flats","map","key","id","lat","lng","selectedFlat","Component","defaultProps","App","selectFlat","setState","handleSearch","e","searchItem","target","value","state","fetch","then","response","json","catch","Error","console","log","type","placeholder","search","onChange","filter","includes","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iUAiBeA,G,YAdF,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAC3BC,EAAK,UAAMH,EAAKI,MAAX,YAAoBJ,EAAKK,cAAzB,cAA4CL,EAAKM,MACtDC,EAAU,QAAUL,EAAW,YAAc,IAC7CM,EAAQ,CACZC,gBAAgB,QAAD,OAAUT,EAAKU,SAAf,OAEjB,OACE,yBAAKC,QAAS,kBAAMV,EAAYD,IAAOY,UAAWL,GAChD,yBAAKK,UAAU,eAAeJ,MAAOA,IACrC,yBAAKI,UAAU,cAAcT,M,iBCFpBU,G,MAPA,SAACC,GACd,IAAIP,EAAU,UAAYO,EAAMZ,SAAW,YAAc,IACvD,OACA,yBAAKU,UAAWL,EAASL,SAAS,IAAIY,EAAMV,MAAOU,EAAMC,UAAY,YCFnEC,E,iLAIM,IAAD,OACP,OAEE,yBAAKR,MAAO,CAAES,OAAQ,QAASC,MAAO,SACrC,kBAAC,IAAD,CAEGC,OAAQC,KAAKN,MAAMK,OACnBE,KAAMD,KAAKN,MAAMO,MAGfD,KAAKN,MAAMQ,MAAMC,KAAI,SAAAvB,GAAI,OAAI,kBAAC,EAAD,CAC3BwB,IAAKxB,EAAKyB,GACVC,IAAK1B,EAAK0B,IACVC,IAAK3B,EAAK2B,IACVvB,MAAOJ,EAAKI,MACZW,SAAUf,EAAKK,cACfH,SAAUF,IAAS,EAAKc,MAAMc,yB,GApBpBC,aAAlBb,EACGc,aAAe,CACpBT,KAAM,IA2BKL,QCiCAe,E,YA5Db,aAAe,IAAD,8BACZ,+CAeFC,WAAa,SAAChC,GAAD,OAAU,EAAKiC,SAAS,CAAEL,aAAc5B,KAhBvC,EAkBdkC,aAAe,SAACC,GAAQ,EAAKF,SAAS,CAAEG,WAAYD,EAAEE,OAAOC,SAhB3D,EAAKC,MAAQ,CACXjB,MAAO,GACPM,aAAc,KACdQ,WAAY,IALF,E,iFASO,IAAD,OAClBI,MAAM,iFACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAnB,GAAK,OAAI,EAAKW,SAAS,CAAEX,aAC9BsB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,eAAgBF,Q,+BAOtC,IAAD,SACyBzB,KAAKmB,MAA7BjB,EADD,EACCA,MAAOM,EADR,EACQA,aACXT,EAAS,CACXO,IAAK,UACLC,IAAK,UAQP,OALAC,IAAiBT,EAAS,CACxBO,IAAKE,EAAaF,IAClBC,IAAKC,EAAaD,MAIlB,yBAAKf,UAAU,OACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,UACb,2BAAOoC,KAAK,OACVC,YAAY,YACZX,MAAOlB,KAAKmB,MAAMW,OAClBC,SAAU/B,KAAKc,gBAEnB,yBAAKtB,UAAU,SAEXU,EAAM8B,QAAO,SAAApD,GAAI,OAAIA,EAAKM,KAAK+C,SAAS,EAAKd,MAAMH,eAAab,KAAI,SAAAvB,GAAI,OAAI,kBAAC,EAAD,CAC1EwB,IAAKxB,EAAKyB,GACVzB,KAAMA,EACNC,YAAa,EAAK+B,WAClB9B,SAAUF,IAAS4B,SAK3B,yBAAKhB,UAAU,OACb,kBAAC,EAAD,CAAWU,MAAOA,EAAOM,aAAcA,EAAcT,OAAQA,U,GAtDrDmC,IAAMzB,WCOJ0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.dc7d96a5.chunk.js","sourcesContent":["import React from 'react';\nimport './flat.css';\n\nconst Flat = ({ flat, handleClick, selected }) => {\n  const title = `${flat.price} ${flat.priceCurrency} - ${flat.name}`\n  const classes = 'flat' + (selected ? ' selected' : '')\n  const style = {\n    backgroundImage: `url('${flat.imageUrl}')`\n  }\n  return (\n    <div onClick={() => handleClick(flat)} className={classes}>\n      <div className=\"flat-picture\" style={style}></div>\n      <div className=\"flat-title\">{title}</div>\n    </div>\n  );\n}\n\nexport default Flat;","import React from 'react';\nimport './marker.css';\n\nconst Marker = (props) => {\n  let classes = 'marker' + (props.selected ? ' selected' : '');\n    return(\n    <div className={classes} selected=''>{props.price}{props.currency && 'â‚¬'}</div>\n  );\n}\n\nexport default Marker;","import React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport Marker from '../marker/marker';\n\nclass GoogleMap extends Component {\n  static defaultProps = {\n    zoom: 11\n  };\n  render() {\n    return (\n      // Important! Always set the container height explicitly\n      <div style={{ height: '100vh', width: '100%' }}>\n       <GoogleMapReact\n          // bootstrapURLKeys={{ key: /* YOUR KEY HERE */ }}\n          center={this.props.center}\n          zoom={this.props.zoom}\n        >\n          {\n            this.props.flats.map(flat => <Marker \n              key={flat.id} \n              lat={flat.lat} \n              lng={flat.lng} \n              price={flat.price}\n              currency={flat.priceCurrency}\n              selected={flat === this.props.selectedFlat}\n              />)\n          }\n        </GoogleMapReact>\n      </div>\n    );\n  }\n}\n\nexport default GoogleMap;","import React from 'react';\nimport './App.css';\nimport Flat from './components/flat/flat';\nimport GoogleMap from './components/google-map/google-map';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      flats: [],\n      selectedFlat: null,\n      searchItem: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://raw.githubusercontent.com/lewagon/flats-boilerplate/master/flats.json')\n      .then(response => response.json())\n      .then(flats => this.setState({ flats }))\n      .catch(Error => console.log('Fetch Error:', Error));\n  }\n\n  selectFlat = (flat) => this.setState({ selectedFlat: flat });\n\n  handleSearch = (e) => { this.setState({ searchItem: e.target.value }) }\n\n  render() {\n    const { flats, selectedFlat } = this.state;\n    let center = {\n      lat: 48.864716,\n      lng: 2.349014\n    }\n\n    selectedFlat && (center = {\n      lat: selectedFlat.lat,\n      lng: selectedFlat.lng\n    })\n\n    return (\n      <div className=\"app\">\n        <div className=\"main\">\n          <div className=\"search\">\n            <input type=\"text\"\n              placeholder=\"Search...\"\n              value={this.state.search}\n              onChange={this.handleSearch} />\n          </div>\n          <div className=\"flats\">\n            {\n              flats.filter(flat => flat.name.includes(this.state.searchItem)).map(flat => <Flat\n                key={flat.id}\n                flat={flat}\n                handleClick={this.selectFlat}\n                selected={flat === selectedFlat}\n              />)\n            }\n          </div>\n        </div>\n        <div className=\"map\">\n          <GoogleMap flats={flats} selectedFlat={selectedFlat} center={center} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}